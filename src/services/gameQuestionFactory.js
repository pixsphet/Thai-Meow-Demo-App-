// ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏°‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏Å

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å Atlas documents
export const buildQuestionsFromAtlasDocs = async (consonantData, vocabularyData, category) => {
  try {
    console.log('üéØ Building questions from Atlas docs...', { 
      consonantCount: consonantData?.length || 0, 
      vocabCount: vocabularyData?.length || 0,
      category 
    });

    if (!consonantData || consonantData.length === 0) {
      console.warn('‚ö†Ô∏è No consonant data available');
      return [];
    }

    const questions = [];
    const consonants = consonantData.slice(0, 10); // ‡πÉ‡∏ä‡πâ 10 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
    consonants.forEach((consonant, index) => {
      // 1. Match Picture - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
      questions.push({
        id: `match_${consonant.char}_${index}`,
        type: 'MATCH_PICTURE',
        instruction: `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á "${consonant.meaning}"`,
        correctText: consonant.char,
        choices: generateChoices(consonant, consonants),
        consonantChar: consonant.char,
        questionText: consonant.meaning
      });

      // 2. Listen Choose - ‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
      questions.push({
        id: `listen_${consonant.char}_${index}`,
        type: 'LISTEN_CHOOSE',
        instruction: `‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô`,
        questionText: consonant.name,
        correctText: consonant.char,
        choices: generateChoices(consonant, consonants),
        consonantChar: consonant.char,
        audioText: consonant.name
      });

      // 3. Arrange Sentence - ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
      questions.push({
        id: `arrange_${consonant.char}_${index}`,
        type: 'ARRANGE_SENTENCE',
        instruction: '‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        questionText: `${consonant.char} ‡∏Ñ‡∏∑‡∏≠ ${consonant.meaning}`,
        correctOrder: [consonant.char, '‡∏Ñ‡∏∑‡∏≠', consonant.meaning],
        wordBank: shuffleArray([consonant.char, '‡∏Ñ‡∏∑‡∏≠', consonant.meaning, '‡πÅ‡∏•‡∏∞', '‡∏´‡∏£‡∏∑‡∏≠', '‡∏Ç‡∏≠‡∏á']),
        consonantChar: consonant.char
      });
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Drag Order question
    if (consonants.length >= 4) {
      questions.push({
        id: `drag_order_${Date.now()}`,
        type: 'DRAG_ORDER',
        instruction: '‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏à‡∏≤‡∏Å ‡∏Å ‡πÑ‡∏õ ‡∏Æ',
        correctOrder: consonants.slice(0, 4).map(c => c.char),
        wordBank: shuffleArray(consonants.slice(0, 4).map(c => ({ id: c.char, text: c.char }))),
        consonantChars: consonants.slice(0, 4).map(c => c.char)
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Sound Group question
    if (consonants.length >= 3) {
      const groupConsonant = consonants[0];
      const sameGroup = consonants.filter(c => getSoundGroup(c.char) === getSoundGroup(groupConsonant.char)).slice(1, 3);
      const otherGroup = consonants.filter(c => getSoundGroup(c.char) !== getSoundGroup(groupConsonant.char)).slice(0, 2);
      
      questions.push({
        id: `sound_group_${Date.now()}`,
        type: 'SOUND_GROUP',
        instruction: `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö "${groupConsonant.char}"`,
        questionText: `‡∏ï‡∏±‡∏ß‡πÑ‡∏´‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö ${groupConsonant.char}?`,
        correctChars: sameGroup.map(c => c.char),
        choices: [...sameGroup, ...otherGroup].map((c, i) => ({
          id: i + 1,
          text: c.char,
          isCorrect: sameGroup.includes(c)
        })),
        consonantChar: groupConsonant.char
      });
    }

    console.log(`‚úÖ Generated ${questions.length} questions`);
    return shuffleArray(questions);

  } catch (error) {
    console.error('‚ùå Error building questions from Atlas docs:', error);
    return [];
  }
};

// Helper functions
const generateChoices = (correctConsonant, allConsonants) => {
  const otherConsonants = allConsonants.filter(c => c.char !== correctConsonant.char);
  const choices = [correctConsonant, ...otherConsonants.slice(0, 3)];
  return shuffleArray(choices).map((c, i) => ({
    id: i + 1,
    text: c.char
  }));
};

const shuffleArray = (array) => {
  const shuffled = [...array];
  for (let i = shuffled.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
};

const getSoundGroup = (char) => {
  if (['‡∏Å','‡∏Ç','‡∏Ñ','‡∏Ü'].includes(char)) return '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠';
  if (['‡∏à','‡∏â','‡∏ä','‡∏ã','‡∏®','‡∏©','‡∏™'].includes(char)) return '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏®‡∏µ‡∏£‡∏©‡∏∞';
  if (['‡∏î','‡∏ï','‡∏ñ','‡∏ó'].includes(char)) return '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏•‡∏¥‡πâ‡∏ô';
  if (['‡∏ö','‡∏õ','‡∏ú','‡∏û','‡∏ü'].includes(char)) return '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏õ‡∏≤‡∏Å';
  return '‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô';
};

export const GAME_MODES = {
  BEGINNER: {
    LISTEN_CHOOSE: 'LISTEN_CHOOSE',
    PICTURE_MATCH: 'PICTURE_MATCH'
  },
  INTERMEDIATE: {
    ARRANGE_SENTENCE: 'ARRANGE_SENTENCE',
    DRAG_ORDER: 'DRAG_ORDER'
  },
  ADVANCED: {
    FILL_BLANK: 'FILL_BLANK',
    SOUND_GROUP: 'SOUND_GROUP'
  }
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡πÇ‡∏´‡∏°‡∏î
export const createQuestion = (consonant, level = 'Beginner', mode = null) => {
  const question = {
    id: `${consonant.thai}_${Date.now()}`,
    consonant,
    level,
    mode: mode || getRandomMode(level),
    question: '',
    options: [],
    correctAnswer: '',
    points: getPoints(level)
  };

  switch (level) {
    case 'Beginner':
      return createBeginnerQuestion(question);
    case 'Intermediate':
      return createIntermediateQuestion(question);
    case 'Advanced':
      return createAdvancedQuestion(question);
    default:
      return createBeginnerQuestion(question);
  }
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö Beginner
const createBeginnerQuestion = (question) => {
  const { consonant } = question;
  
  // ‡πÇ‡∏´‡∏°‡∏î LISTEN_CHOOSE - ‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
  if (question.mode === GAME_MODES.BEGINNER.LISTEN_CHOOSE) {
    question.question = `‡∏ü‡∏±‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`;
    question.options = generateConsonantOptions(consonant.thai);
    question.correctAnswer = consonant.thai;
  }
  // ‡πÇ‡∏´‡∏°‡∏î PICTURE_MATCH - ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
  else if (question.mode === GAME_MODES.BEGINNER.PICTURE_MATCH) {
    question.question = `‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`;
    question.options = generatePictureOptions(consonant);
    question.correctAnswer = consonant.thai;
  }
  
  return question;
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö Intermediate
const createIntermediateQuestion = (question) => {
  const { consonant } = question;
  
  // ‡πÇ‡∏´‡∏°‡∏î ARRANGE_SENTENCE - ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≥
  if (question.mode === GAME_MODES.INTERMEDIATE.ARRANGE_SENTENCE) {
    question.question = `‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≥‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`;
    question.options = generateSentenceOptions(consonant);
    question.correctAnswer = consonant.name;
  }
  // ‡πÇ‡∏´‡∏°‡∏î DRAG_ORDER - ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞
  else if (question.mode === GAME_MODES.INTERMEDIATE.DRAG_ORDER) {
    question.question = `‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`;
    question.options = generateOrderOptions(consonant.thai);
    question.correctAnswer = consonant.thai;
  }
  
  return question;
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö Advanced
const createAdvancedQuestion = (question) => {
  const { consonant } = question;
  
  // ‡πÇ‡∏´‡∏°‡∏î FILL_BLANK - ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≥
  if (question.mode === GAME_MODES.ADVANCED.FILL_BLANK) {
    question.question = `‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ`;
    question.options = generateFillBlankOptions(consonant);
    question.correctAnswer = consonant.meaningTH;
  }
  // ‡πÇ‡∏´‡∏°‡∏î SOUND_GROUP - ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á
  else if (question.mode === GAME_MODES.ADVANCED.SOUND_GROUP) {
    question.question = `‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ô`;
    question.options = generateSoundGroupOptions(consonant);
    question.correctAnswer = consonant.thai;
  }
  
  return question;
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠
const getRandomMode = (level) => {
  const modes = Object.values(GAME_MODES[level.toUpperCase()]);
  return modes[Math.floor(Math.random() * modes.length)];
};

const getPoints = (level) => {
  switch (level) {
    case 'Beginner': return 10;
    case 'Intermediate': return 20;
    case 'Advanced': return 30;
    default: return 10;
  }
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞
const generateConsonantOptions = (correctThai) => {
  const allConsonants = ['‡∏Å', '‡∏Ç', '‡∏Ñ', '‡∏á', '‡∏à', '‡∏ä', '‡∏ã', '‡∏ç', '‡∏î', '‡∏ï'];
  const options = [correctThai];
  
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ú‡∏¥‡∏î
  while (options.length < 4) {
    const random = allConsonants[Math.floor(Math.random() * allConsonants.length)];
    if (!options.includes(random)) {
      options.push(random);
    }
  }
  
  return shuffleArray(options);
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
const generatePictureOptions = (consonant) => {
  const pictures = [
    { thai: consonant.thai, meaning: consonant.meaningTH },
    { thai: '‡∏Ç', meaning: '‡πÑ‡∏Ç‡πà' },
    { thai: '‡∏Ñ', meaning: '‡∏Ñ‡∏ß‡∏≤‡∏¢' },
    { thai: '‡∏á', meaning: '‡∏á‡∏π' }
  ];
  
  return shuffleArray(pictures);
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ
const generateSentenceOptions = (consonant) => {
  const words = consonant.name.split('-');
  return shuffleArray(words);
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö
const generateOrderOptions = (thai) => {
  const orders = [thai, '‡∏Ç', '‡∏Ñ', '‡∏á'];
  return shuffleArray(orders);
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡∏≥
const generateFillBlankOptions = (consonant) => {
  const meanings = [consonant.meaningTH, '‡πÑ‡∏Ç‡πà', '‡∏Ñ‡∏ß‡∏≤‡∏¢', '‡∏á‡∏π'];
  return shuffleArray(meanings);
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏á
const generateSoundGroupOptions = (consonant) => {
  const sounds = [consonant.thai, '‡∏Ç', '‡∏Ñ', '‡∏á'];
  return shuffleArray(sounds);
};

