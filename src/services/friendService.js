import api from './apiClient';

class FriendService {
  // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
  async searchUsers(query) {
    try {
      console.log('üîç [FRIEND] Searching users:', query);
      
      const response = await api.get('/friends/search', {
        params: { query }
      });
      
      console.log('üì® [FRIEND] Search response:', response.data);
      
      if (response.data.success) {
        return {
          success: true,
          data: response.data.data || []
        };
      } else {
        return {
          success: false,
          error: response.data.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ'
        };
      }
    } catch (error) {
      console.error('‚ùå [FRIEND] Search error:', error);
      return {
        success: false,
        error: error.response?.data?.error || error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤'
      };
    }
  }

  // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
  async sendFriendRequest(friendId) {
    try {
      console.log('üì§ [FRIEND] Sending friend request to:', friendId);
      
      const response = await api.post('/friends/request', {
        friendId
      });
      
      console.log('üì® [FRIEND] Friend request response:', response.data);
      
      if (response.data.success) {
        return {
          success: true,
          message: response.data.message || '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        };
      } else {
        return {
          success: false,
          error: response.data.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ'
        };
      }
    } catch (error) {
      console.error('‚ùå [FRIEND] Send request error:', error);
      return {
        success: false,
        error: error.response?.data?.error || error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô'
      };
    }
  }

  // ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
  async acceptFriendRequest(requestId) {
    try {
      console.log('üì§ [FRIEND] Accepting friend request:', requestId);
      
      const response = await api.post('/friends/accept', {
        requestId
      });
      
      console.log('üì® [FRIEND] Accept response:', response.data);
      
      if (response.data.success) {
        return {
          success: true,
          message: response.data.message || '‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        };
      } else {
        return {
          success: false,
          error: response.data.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ'
        };
      }
    } catch (error) {
      console.error('‚ùå [FRIEND] Accept error:', error);
      return {
        success: false,
        error: error.response?.data?.error || error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô'
      };
    }
  }

  // ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
  async rejectFriendRequest(requestId) {
    try {
      console.log('üì§ [FRIEND] Rejecting friend request:', requestId);
      
      const response = await api.post('/friends/reject', {
        requestId
      });
      
      console.log('üì® [FRIEND] Reject response:', response.data);
      
      if (response.data.success) {
        return {
          success: true,
          message: response.data.message || '‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        };
      } else {
        return {
          success: false,
          error: response.data.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ'
        };
      }
    } catch (error) {
      console.error('‚ùå [FRIEND] Reject error:', error);
      return {
        success: false,
        error: error.response?.data?.error || error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô'
      };
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
  async getFriends() {
    try {
      console.log('üì§ [FRIEND] Getting friends list');
      
      const response = await api.get('/friends/list');
      
      console.log('üì® [FRIEND] Friends list response:', response.data);
      
      if (response.data.success) {
        return {
          success: true,
          data: response.data.data || []
        };
      } else {
        return {
          success: false,
          error: response.data.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ'
        };
      }
    } catch (error) {
      console.error('‚ùå [FRIEND] Get friends error:', error);
      return {
        success: false,
        error: error.response?.data?.error || error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô'
      };
    }
  }

  // ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏£‡∏±‡∏ö
  async getFriendRequests() {
    try {
      console.log('üì§ [FRIEND] Getting friend requests');
      
      const response = await api.get('/friends/requests');
      
      console.log('üì® [FRIEND] Friend requests response:', response.data);
      
      if (response.data.success) {
        return {
          success: true,
          data: response.data.data || []
        };
      } else {
        return {
          success: false,
          error: response.data.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ'
        };
      }
    } catch (error) {
      console.error('‚ùå [FRIEND] Get requests error:', error);
      return {
        success: false,
        error: error.response?.data?.error || error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô'
      };
    }
  }

  // ‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô
  async removeFriend(friendId) {
    try {
      console.log('üì§ [FRIEND] Removing friend:', friendId);
      
      const response = await api.delete('/friends/remove', {
        data: { friendId }
      });
      
      console.log('üì® [FRIEND] Remove friend response:', response.data);
      
      if (response.data.success) {
        return {
          success: true,
          message: response.data.message || '‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
        };
      } else {
        return {
          success: false,
          error: response.data.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏î‡πâ'
        };
      }
    } catch (error) {
      console.error('‚ùå [FRIEND] Remove friend error:', error);
      return {
        success: false,
        error: error.response?.data?.error || error.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô'
      };
    }
  }
}

export default new FriendService();
