import apiClient from './apiClient';

/**
 * Service for fetching vocabulary data, specifically consonants
 */
export const fetchConsonants = async () => {
  try {
    console.log('üîÑ Fetching consonants from API...');
    // baseURL already includes /api
    const response = await apiClient.get('/vocab/consonants');
    
    const payload = Array.isArray(response.data?.data) ? response.data.data : response.data;
    if (payload && Array.isArray(payload)) {
      console.log(`‚úÖ Successfully loaded ${payload.length} consonants`);
      
      // Transform data for game use
      const consonants = payload.map(item => ({
        char: item.thai,
        name: item.exampleTH || item.nameTH,
        meaning: item.en,
        roman: item.roman,
        image: item.imagePath,
        level: item.level || 'Beginner',
        lessonKey: item.lessonKey || 'consonants_basic'
      }));
      
      return consonants;
    } else {
      throw new Error('Invalid data format received from API');
    }
  } catch (error) {
    console.error('‚ùå Error fetching consonants:', error);
    throw error;
  }
};

/**
 * Service for fetching vowel data
 */
export const fetchVowels = async () => {
  try {
    console.log('üîÑ Fetching vowels from API...');
    const response = await apiClient.get('/vocab/vowels');

    const payload = Array.isArray(response.data?.data)
      ? response.data.data
      : Array.isArray(response.data?.vowels)
        ? response.data.vowels
        : response.data;

    if (payload && Array.isArray(payload)) {
      console.log(`‚úÖ Successfully loaded ${payload.length} vowels`);

      return payload.map(item => ({
        char: item.thai,
        name: item.nameTH || item.thai,
        meaning: item.en,
        roman: item.roman,
        image: item.imagePath,
        level: item.level || 'Beginner',
        lessonKey: item.lessonKey || 'vowels_basic',
        sound: item.thai,
        imageKey: item.imagePath
          ? item.imagePath.split('/').pop()?.replace(/\.[^.]+$/, '')
          : item.thai,
        type: item.type || item.position || '',
        example: item.example,
        exampleAudio: item.exampleAudio,
        length: item.length || '',
        pair: item.pair || '',
        group: item.group || '',
      }));
    }

    throw new Error('Invalid data format received from API');
  } catch (error) {
    console.error('‚ùå Error fetching vowels:', error);
    throw error;
  }
};

/**
 * Get consonants with fallback data if API fails
 */
export const getConsonantsWithFallback = async () => {
  try {
    return await fetchConsonants();
  } catch (error) {
    console.warn('‚ö†Ô∏è Using fallback consonants data');
    return getFallbackConsonants();
  }
};

/**
 * Fallback vowels data (32 Thai vowels)
 */
const getFallbackVowels = () => {
  const fallbackVowels = [
    // Pair 1: ‡∏≠‡∏∞ / ‡∏≠‡∏≤
    { char: '‡∏≠‡∏∞', name: '‡∏™‡∏£‡∏∞‡∏≠‡∏∞', meaning: '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏£‡∏∞‡∏≠‡∏∞', roman: 'a', length: 'short', pair: '‡∏≠‡∏≤', type: 'back', example: '‡∏Å‡∏∞', group: '‡∏™‡∏£‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏±‡πâ‡∏ô' },
    { char: '‡∏≠‡∏≤', name: '‡∏™‡∏£‡∏∞‡∏≠‡∏≤', meaning: '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏£‡∏∞‡∏≠‡∏≤', roman: 'aa', length: 'long', pair: '‡∏≠‡∏∞', type: 'back', example: '‡∏Å‡∏≤', group: '‡∏™‡∏£‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏¢‡∏≤‡∏ß' },
    // Pair 2: ‡∏≠‡∏¥ / ‡∏≠‡∏µ
    { char: '‡∏≠‡∏¥', name: '‡∏™‡∏£‡∏∞‡∏≠‡∏¥', meaning: '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏£‡∏∞‡∏≠‡∏¥', roman: 'i', length: 'short', pair: '‡∏≠‡∏µ', type: 'top', example: '‡∏Å‡∏¥', group: '‡∏™‡∏£‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏±‡πâ‡∏ô' },
    { char: '‡∏≠‡∏µ', name: '‡∏™‡∏£‡∏∞‡∏≠‡∏µ', meaning: '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏£‡∏∞‡∏≠‡∏µ', roman: 'ii', length: 'long', pair: '‡∏≠‡∏¥', type: 'top', example: '‡∏Å‡∏µ', group: '‡∏™‡∏£‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏¢‡∏≤‡∏ß' },
    // Pair 3: ‡∏≠‡∏∏ / ‡∏≠‡∏π
    { char: '‡∏≠‡∏∏', name: '‡∏™‡∏£‡∏∞‡∏≠‡∏∏', meaning: '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏£‡∏∞‡∏≠‡∏∏', roman: 'u', length: 'short', pair: '‡∏≠‡∏π', type: 'bottom', example: '‡∏Å‡∏∏', group: '‡∏™‡∏£‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏±‡πâ‡∏ô' },
    { char: '‡∏≠‡∏π', name: '‡∏™‡∏£‡∏∞‡∏≠‡∏π', meaning: '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏£‡∏∞‡∏≠‡∏π', roman: 'uu', length: 'long', pair: '‡∏≠‡∏∏', type: 'bottom', example: '‡∏Å‡∏π', group: '‡∏™‡∏£‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏¢‡∏≤‡∏ß' },
    // Pair 4: ‡πÄ‡∏≠‡∏∞ / ‡πÄ‡∏≠
    { char: '‡πÄ‡∏≠‡∏∞', name: '‡∏™‡∏£‡∏∞‡πÄ‡∏≠‡∏∞', meaning: '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏£‡∏∞‡πÄ‡∏≠‡∏∞', roman: 'e', length: 'short', pair: '‡πÄ‡∏≠', type: 'front', example: '‡πÄ‡∏Å‡∏∞', group: '‡∏™‡∏£‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏±‡πâ‡∏ô' },
    { char: '‡πÄ‡∏≠', name: '‡∏™‡∏£‡∏∞‡πÄ‡∏≠', meaning: '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏£‡∏∞‡πÄ‡∏≠', roman: 'e', length: 'long', pair: '‡πÄ‡∏≠‡∏∞', type: 'front', example: '‡πÄ‡∏Å', group: '‡∏™‡∏£‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏¢‡∏≤‡∏ß' },
    // Pair 5: ‡πÅ‡∏≠‡∏∞ / ‡πÅ‡∏≠
    { char: '‡πÅ‡∏≠‡∏∞', name: '‡∏™‡∏£‡∏∞‡πÅ‡∏≠‡∏∞', meaning: '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏£‡∏∞‡πÅ‡∏≠‡∏∞', roman: 'ae', length: 'short', pair: '‡πÅ‡∏≠', type: 'front', example: '‡πÅ‡∏Å‡∏∞', group: '‡∏™‡∏£‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏±‡πâ‡∏ô' },
    { char: '‡πÅ‡∏≠', name: '‡∏™‡∏£‡∏∞‡πÅ‡∏≠', meaning: '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏£‡∏∞‡πÅ‡∏≠', roman: 'ae', length: 'long', pair: '‡πÅ‡∏≠‡∏∞', type: 'front', example: '‡πÅ‡∏Å', group: '‡∏™‡∏£‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏¢‡∏≤‡∏ß' },
    // Pair 6: ‡πÇ‡∏≠‡∏∞ / ‡πÇ‡∏≠
    { char: '‡πÇ‡∏≠‡∏∞', name: '‡∏™‡∏£‡∏∞‡πÇ‡∏≠‡∏∞', meaning: '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏£‡∏∞‡πÇ‡∏≠‡∏∞', roman: 'o', length: 'short', pair: '‡πÇ‡∏≠', type: 'front', example: '‡πÇ‡∏Å‡∏∞', group: '‡∏™‡∏£‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏±‡πâ‡∏ô' },
    { char: '‡πÇ‡∏≠', name: '‡∏™‡∏£‡∏∞‡πÇ‡∏≠', meaning: '‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏™‡∏£‡∏∞‡πÇ‡∏≠', roman: 'o', length: 'long', pair: '‡πÇ‡∏≠‡∏∞', type: 'front', example: '‡πÇ‡∏Å', group: '‡∏™‡∏£‡∏∞‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏¢‡∏≤‡∏ß' },
  ];

  return fallbackVowels.map(item => ({
    ...item,
    sound: item.sound || item.char,
    imageKey: item.imageKey || item.char,
    image: (item.imageKey || item.char) ? `vowels/${item.imageKey || item.char}.jpg` : null,
    example: item.example,
    exampleAudio: item.exampleAudio || '',
    type: item.type,
    length: item.length,
    pair: item.pair || '',
    group: item.group || '',
    level: 'Beginner',
    lessonKey: 'vowels_basic'
  }));
};

/**
 * Get vowels with fallback data if API fails
 */
export const getVowelsWithFallback = async () => {
  try {
    const vowels = await fetchVowels();
    if (!vowels || vowels.length === 0) {
      console.warn('‚ö†Ô∏è Vowel API returned empty dataset, using fallback');
      return getFallbackVowels();
    }
    return vowels;
  } catch (error) {
    console.warn('‚ö†Ô∏è Using fallback vowels data');
    return getFallbackVowels();
  }
};

/**
 * Fallback consonants data (44 Thai consonants)
 */
const getFallbackConsonants = () => {
  const fallbackData = [
    { char: '‡∏Å', name: '‡∏Å‡∏≠-‡πÑ‡∏Å‡πà', meaning: 'chicken', roman: 'gor' },
    { char: '‡∏Ç', name: '‡∏Ç‡∏≠-‡πÑ‡∏Ç‡πà', meaning: 'egg', roman: 'khor' },
    { char: '‡∏É', name: '‡∏É‡∏≠-‡∏Ç‡∏ß‡∏î', meaning: 'bottle', roman: 'khor' },
    { char: '‡∏Ñ', name: '‡∏Ñ‡∏≠-‡∏Ñ‡∏ß‡∏≤‡∏¢', meaning: 'buffalo', roman: 'khor' },
    { char: '‡∏Ö', name: '‡∏Ö‡∏≠-‡∏Ñ‡∏ô', meaning: 'person', roman: 'khor' },
    { char: '‡∏Ü', name: '‡∏Ü‡∏≠-‡∏£‡∏∞‡∏Ü‡∏±‡∏á', meaning: 'bell', roman: 'khor' },
    { char: '‡∏á', name: '‡∏á‡∏≠-‡∏á‡∏π', meaning: 'snake', roman: 'ngor' },
    { char: '‡∏à', name: '‡∏à‡∏≠-‡∏à‡∏≤‡∏ô', meaning: 'plate', roman: 'jor' },
    { char: '‡∏â', name: '‡∏â‡∏≠-‡∏â‡∏¥‡πà‡∏á', meaning: 'cymbals', roman: 'chor' },
    { char: '‡∏ä', name: '‡∏ä‡∏≠-‡∏ä‡πâ‡∏≤‡∏á', meaning: 'elephant', roman: 'chor' },
    { char: '‡∏ã', name: '‡∏ã‡∏≠-‡πÇ‡∏ã‡πà', meaning: 'chain', roman: 'sor' },
    { char: '‡∏å', name: '‡∏å‡∏≠-‡πÄ‡∏å‡∏≠', meaning: 'tree', roman: 'chor' },
    { char: '‡∏ç', name: '‡∏ç‡∏≠-‡∏´‡∏ç‡∏¥‡∏á', meaning: 'woman', roman: 'yor' },
    { char: '‡∏é', name: '‡∏é‡∏≠-‡∏ä‡∏é‡∏≤', meaning: 'crown', roman: 'dor' },
    { char: '‡∏è', name: '‡∏è‡∏≠-‡∏õ‡∏è‡∏±‡∏Å', meaning: 'goad', roman: 'tor' },
    { char: '‡∏ê', name: '‡∏ê‡∏≠-‡∏ê‡∏≤‡∏ô', meaning: 'base', roman: 'thor' },
    { char: '‡∏ë', name: '‡∏ë‡∏≠-‡∏°‡∏ì‡πÇ‡∏ë', meaning: 'doll', roman: 'thor' },
    { char: '‡∏í', name: '‡∏í‡∏≠-‡∏ú‡∏π‡πâ‡πÄ‡∏í‡πà‡∏≤', meaning: 'elder', roman: 'thor' },
    { char: '‡∏ì', name: '‡∏ì‡∏≠-‡πÄ‡∏ì‡∏£', meaning: 'novice', roman: 'nor' },
    { char: '‡∏î', name: '‡∏î‡∏≠-‡πÄ‡∏î‡πá‡∏Å', meaning: 'child', roman: 'dor' },
    { char: '‡∏ï', name: '‡∏ï‡∏≠-‡πÄ‡∏ï‡πà‡∏≤', meaning: 'turtle', roman: 'tor' },
    { char: '‡∏ñ', name: '‡∏ñ‡∏≠-‡∏ñ‡∏∏‡∏á', meaning: 'bag', roman: 'thor' },
    { char: '‡∏ó', name: '‡∏ó‡∏≠-‡∏ó‡∏´‡∏≤‡∏£', meaning: 'soldier', roman: 'thor' },
    { char: '‡∏ò', name: '‡∏ò‡∏≠-‡∏ò‡∏á', meaning: 'flag', roman: 'thor' },
    { char: '‡∏ô', name: '‡∏ô‡∏≠-‡∏´‡∏ô‡∏π', meaning: 'mouse', roman: 'nor' },
    { char: '‡∏ö', name: '‡∏ö‡∏≠-‡πÉ‡∏ö‡πÑ‡∏°‡πâ', meaning: 'leaf', roman: 'bor' },
    { char: '‡∏õ', name: '‡∏õ‡∏≠-‡∏õ‡∏•‡∏≤', meaning: 'fish', roman: 'por' },
    { char: '‡∏ú', name: '‡∏ú‡∏≠-‡∏ú‡∏∂‡πâ‡∏á', meaning: 'bee', roman: 'phor' },
    { char: '‡∏ù', name: '‡∏ù‡∏≠-‡∏ù‡∏≤', meaning: 'lid', roman: 'for' },
    { char: '‡∏û', name: '‡∏û‡∏≠-‡∏û‡∏≤‡∏ô', meaning: 'tray', roman: 'phor' },
    { char: '‡∏ü', name: '‡∏ü‡∏≠-‡∏ü‡∏±‡∏ô', meaning: 'tooth', roman: 'for' },
    { char: '‡∏†', name: '‡∏†‡∏≠-‡∏™‡∏≥‡πÄ‡∏†‡∏≤', meaning: 'junk', roman: 'phor' },
    { char: '‡∏°', name: '‡∏°‡∏≠-‡∏°‡πâ‡∏≤', meaning: 'horse', roman: 'mor' },
    { char: '‡∏¢', name: '‡∏¢‡∏≠-‡∏¢‡∏±‡∏Å‡∏©‡πå', meaning: 'giant', roman: 'yor' },
    { char: '‡∏£', name: '‡∏£‡∏≠-‡πÄ‡∏£‡∏∑‡∏≠', meaning: 'boat', roman: 'ror' },
    { char: '‡∏•', name: '‡∏•‡∏≠-‡∏•‡∏¥‡∏á', meaning: 'monkey', roman: 'lor' },
    { char: '‡∏ß', name: '‡∏ß‡∏≠-‡πÅ‡∏´‡∏ß‡∏ô', meaning: 'ring', roman: 'wor' },
    { char: '‡∏®', name: '‡∏®‡∏≠-‡∏®‡∏≤‡∏•‡∏≤', meaning: 'pavilion', roman: 'sor' },
    { char: '‡∏©', name: '‡∏©‡∏≠-‡∏§‡∏≤‡∏©‡∏µ', meaning: 'hermit', roman: 'sor' },
    { char: '‡∏™', name: '‡∏™‡∏≠-‡πÄ‡∏™‡∏∑‡∏≠', meaning: 'tiger', roman: 'sor' },
    { char: '‡∏´', name: '‡∏´‡∏≠-‡∏´‡∏µ‡∏ö', meaning: 'box', roman: 'hor' },
    { char: '‡∏¨', name: '‡∏¨‡∏≠-‡∏à‡∏∏‡∏¨‡∏≤', meaning: 'kite', roman: 'lor' },
    { char: '‡∏≠', name: '‡∏≠‡∏≠-‡∏≠‡πà‡∏≤‡∏á', meaning: 'basin', roman: 'or' },
    { char: '‡∏Æ', name: '‡∏Æ‡∏≠-‡∏ô‡∏Å‡∏Æ‡∏π‡∏Å', meaning: 'owl', roman: 'hor' }
  ];

  return fallbackData.map(item => ({
    ...item,
    image: `/src/assets/letters/${item.char.toLowerCase()}_${item.roman}.png`,
    level: 'Beginner',
    lessonKey: 'consonants_basic'
  }));
};

/**
 * Get image path for consonant
 */
export const getConsonantImagePath = (consonant) => {
  if (consonant.image) {
    return consonant.image;
  }
  
  // Generate fallback path
  const char = consonant.char || consonant.thai;
  const roman = consonant.roman || 'unknown';
  return `/src/assets/letters/${char.toLowerCase()}_${roman}.png`;
};

/**
 * Get display name for consonant
 */
export const getConsonantDisplayName = (consonant) => {
  return consonant.name || consonant.exampleTH || `${consonant.char}-${consonant.meaning}`;
};

// Alias for compatibility
export const getConsonants = fetchConsonants;
export const getVowels = fetchVowels;

export default {
  fetchConsonants,
  getConsonants,
  getConsonantsWithFallback,
  getConsonantImagePath,
  getConsonantDisplayName,
  fetchVowels,
  getVowels,
  getVowelsWithFallback
};
