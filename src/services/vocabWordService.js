import apiClient from './apiClient';
import fallbackVowelsData from '../data/vowels_fallback.json';

/**
 * Service for fetching vocabulary data, specifically consonants
 */

/**
 * Service for fetching greetings vocabulary
 */
export const fetchGreetings = async () => {
  try {
    console.log('ЁЯФД Fetching greetings from API...');
    const response = await apiClient.get('/greetings');
    
    const payload = Array.isArray(response.data?.data) ? response.data.data : response.data;
    if (payload && Array.isArray(payload)) {
      console.log(`тЬЕ Successfully loaded ${payload.length} greetings`);
      
      // Transform data for game use
      const greetings = payload.map(item => ({
        thai: item.thai,
        roman: item.roman,
        meaning: item.meaning,
        example: item.example,
        tts: item.tts,
        emoji: item.emoji,
        category: item.category,
        lesson: item.lesson,
        level: item.level,
        type: item.type,
        image: item.imagePath
      }));
      
      return greetings;
    } else {
      throw new Error('Invalid data format received from API');
    }
  } catch (error) {
    console.error('тЭМ Error fetching greetings:', error);
    throw error;
  }
};
export const fetchConsonants = async () => {
  try {
    console.log('ЁЯФД Fetching consonants from API...');
    // baseURL already includes /api
    const response = await apiClient.get('/vocab/consonants');
    
    const payload = Array.isArray(response.data?.data) ? response.data.data : response.data;
    if (payload && Array.isArray(payload)) {
      console.log(`тЬЕ Successfully loaded ${payload.length} consonants`);
      
      // Transform data for game use
      const consonants = payload.map(item => ({
        char: item.thai,
        name: item.exampleTH || item.nameTH,
        meaning: item.en,
        roman: item.roman,
        image: item.imagePath,
        level: item.level || 'Beginner',
        lessonKey: item.lessonKey || 'consonants_basic'
      }));
      
      return consonants;
    } else {
      throw new Error('Invalid data format received from API');
    }
  } catch (error) {
    console.error('тЭМ Error fetching consonants:', error);
    throw error;
  }
};

/**
 * Service for fetching vowel data
 */
export const fetchVowels = async () => {
  try {
    console.log('ЁЯФД Fetching vowels from API...');
    const response = await apiClient.get('/vocab/vowels');

    const payload = Array.isArray(response.data?.data)
      ? response.data.data
      : Array.isArray(response.data?.vowels)
        ? response.data.vowels
        : response.data;

    if (payload && Array.isArray(payload)) {
      console.log(`тЬЕ Successfully loaded ${payload.length} vowels`);

      return payload.map(item => ({
        char: item.thai,
        name: item.nameTH || item.thai,
        meaning: item.en,
        roman: item.roman,
        image: item.imagePath,
        level: item.level || 'Beginner',
        lessonKey: item.lessonKey || 'vowels_basic',
        sound: item.thai,
        imageKey: item.imagePath
          ? item.imagePath.split('/').pop()?.replace(/\.[^.]+$/, '')
          : item.thai,
        type: item.type || item.position || '',
        example: item.example,
        exampleAudio: item.exampleAudio,
        length: item.length || '',
        pair: item.pair || '',
        group: item.group || '',
      }));
    }

    throw new Error('Invalid data format received from API');
  } catch (error) {
    console.error('тЭМ Error fetching vowels:', error);
    throw error;
  }
};

/**
 * Get consonants with fallback data if API fails
 */
export const getConsonantsWithFallback = async () => {
  try {
    return await fetchConsonants();
  } catch (error) {
    console.warn('тЪая╕П Using fallback consonants data');
    return getFallbackConsonants();
  }
};

/**
 * Fallback vowels data (32 Thai vowels)
 */
const getFallbackVowels = () =>
  fallbackVowelsData.map((item) => ({
    char: item.thai,
    name: item.nameTH || item.thai,
    meaning: item.meaningTH || item.meaningEN || '',
    roman: item.roman,
    sound: item.audioText || item.thai,
    imageKey: item.image || item.thai,
    image: item.image || item.thai,
    example: item.exampleTH || item.example || '',
    exampleAudio: item.exampleAudio || '',
    type: item.type || item.position || '',
    length: item.length || '',
    pair: item.pair || '',
    group: item.group || '',
    level: item.level || 'Beginner',
    lessonKey: item.lessonKey || 'vowels_basic',
  }));

/**
 * Get vowels with fallback data if API fails
 */
export const getVowelsWithFallback = async () => {
  try {
    const vowels = await fetchVowels();
    if (!vowels || vowels.length === 0) {
      console.warn('тЪая╕П Vowel API returned empty dataset, using fallback');
      return getFallbackVowels();
    }
    return vowels;
  } catch (error) {
    console.warn('тЪая╕П Using fallback vowels data');
    return getFallbackVowels();
  }
};

/**
 * Fallback consonants data (44 Thai consonants)
 */
const getFallbackConsonants = () => {
  const fallbackData = [
    { char: 'р╕Б', name: 'р╕Бр╕н-р╣Др╕Бр╣И', meaning: 'chicken', roman: 'gor' },
    { char: 'р╕В', name: 'р╕Вр╕н-р╣Др╕Вр╣И', meaning: 'egg', roman: 'khor' },
    { char: 'р╕Г', name: 'р╕Гр╕н-р╕Вр╕зр╕Ф', meaning: 'bottle', roman: 'khor' },
    { char: 'р╕Д', name: 'р╕Др╕н-р╕Др╕зр╕▓р╕в', meaning: 'buffalo', roman: 'khor' },
    { char: 'р╕Е', name: 'р╕Ер╕н-р╕Др╕Щ', meaning: 'person', roman: 'khor' },
    { char: 'р╕Ж', name: 'р╕Жр╕н-р╕гр╕░р╕Жр╕▒р╕З', meaning: 'bell', roman: 'khor' },
    { char: 'р╕З', name: 'р╕Зр╕н-р╕Зр╕╣', meaning: 'snake', roman: 'ngor' },
    { char: 'р╕И', name: 'р╕Ир╕н-р╕Ир╕▓р╕Щ', meaning: 'plate', roman: 'jor' },
    { char: 'р╕Й', name: 'р╕Йр╕н-р╕Йр╕┤р╣Ир╕З', meaning: 'cymbals', roman: 'chor' },
    { char: 'р╕К', name: 'р╕Кр╕н-р╕Кр╣Йр╕▓р╕З', meaning: 'elephant', roman: 'chor' },
    { char: 'р╕Л', name: 'р╕Лр╕н-р╣Вр╕Лр╣И', meaning: 'chain', roman: 'sor' },
    { char: 'р╕М', name: 'р╕Мр╕н-р╣Ар╕Мр╕н', meaning: 'tree', roman: 'chor' },
    { char: 'р╕Н', name: 'р╕Нр╕н-р╕лр╕Нр╕┤р╕З', meaning: 'woman', roman: 'yor' },
    { char: 'р╕О', name: 'р╕Ор╕н-р╕Кр╕Ор╕▓', meaning: 'crown', roman: 'dor' },
    { char: 'р╕П', name: 'р╕Пр╕н-р╕Ыр╕Пр╕▒р╕Б', meaning: 'goad', roman: 'tor' },
    { char: 'р╕Р', name: 'р╕Рр╕н-р╕Рр╕▓р╕Щ', meaning: 'base', roman: 'thor' },
    { char: 'р╕С', name: 'р╕Ср╕н-р╕бр╕Ур╣Вр╕С', meaning: 'doll', roman: 'thor' },
    { char: 'р╕Т', name: 'р╕Тр╕н-р╕Ьр╕╣р╣Йр╣Ар╕Тр╣Ир╕▓', meaning: 'elder', roman: 'thor' },
    { char: 'р╕У', name: 'р╕Ур╕н-р╣Ар╕Ур╕г', meaning: 'novice', roman: 'nor' },
    { char: 'р╕Ф', name: 'р╕Фр╕н-р╣Ар╕Фр╣Зр╕Б', meaning: 'child', roman: 'dor' },
    { char: 'р╕Х', name: 'р╕Хр╕н-р╣Ар╕Хр╣Ир╕▓', meaning: 'turtle', roman: 'tor' },
    { char: 'р╕Ц', name: 'р╕Цр╕н-р╕Цр╕╕р╕З', meaning: 'bag', roman: 'thor' },
    { char: 'р╕Ч', name: 'р╕Чр╕н-р╕Чр╕лр╕▓р╕г', meaning: 'soldier', roman: 'thor' },
    { char: 'р╕Ш', name: 'р╕Шр╕н-р╕Шр╕З', meaning: 'flag', roman: 'thor' },
    { char: 'р╕Щ', name: 'р╕Щр╕н-р╕лр╕Щр╕╣', meaning: 'mouse', roman: 'nor' },
    { char: 'р╕Ъ', name: 'р╕Ър╕н-р╣Гр╕Ър╣Др╕бр╣Й', meaning: 'leaf', roman: 'bor' },
    { char: 'р╕Ы', name: 'р╕Ыр╕н-р╕Ыр╕ер╕▓', meaning: 'fish', roman: 'por' },
    { char: 'р╕Ь', name: 'р╕Ьр╕н-р╕Ьр╕╢р╣Йр╕З', meaning: 'bee', roman: 'phor' },
    { char: 'р╕Э', name: 'р╕Эр╕н-р╕Эр╕▓', meaning: 'lid', roman: 'for' },
    { char: 'р╕Ю', name: 'р╕Юр╕н-р╕Юр╕▓р╕Щ', meaning: 'tray', roman: 'phor' },
    { char: 'р╕Я', name: 'р╕Яр╕н-р╕Яр╕▒р╕Щ', meaning: 'tooth', roman: 'for' },
    { char: 'р╕а', name: 'р╕ар╕н-р╕кр╕│р╣Ар╕ар╕▓', meaning: 'junk', roman: 'phor' },
    { char: 'р╕б', name: 'р╕бр╕н-р╕бр╣Йр╕▓', meaning: 'horse', roman: 'mor' },
    { char: 'р╕в', name: 'р╕вр╕н-р╕вр╕▒р╕Бр╕йр╣М', meaning: 'giant', roman: 'yor' },
    { char: 'р╕г', name: 'р╕гр╕н-р╣Ар╕гр╕╖р╕н', meaning: 'boat', roman: 'ror' },
    { char: 'р╕е', name: 'р╕ер╕н-р╕ер╕┤р╕З', meaning: 'monkey', roman: 'lor' },
    { char: 'р╕з', name: 'р╕зр╕н-р╣Бр╕лр╕зр╕Щ', meaning: 'ring', roman: 'wor' },
    { char: 'р╕и', name: 'р╕ир╕н-р╕ир╕▓р╕ер╕▓', meaning: 'pavilion', roman: 'sor' },
    { char: 'р╕й', name: 'р╕йр╕н-р╕др╕▓р╕йр╕╡', meaning: 'hermit', roman: 'sor' },
    { char: 'р╕к', name: 'р╕кр╕н-р╣Ар╕кр╕╖р╕н', meaning: 'tiger', roman: 'sor' },
    { char: 'р╕л', name: 'р╕лр╕н-р╕лр╕╡р╕Ъ', meaning: 'box', roman: 'hor' },
    { char: 'р╕м', name: 'р╕мр╕н-р╕Ир╕╕р╕мр╕▓', meaning: 'kite', roman: 'lor' },
    { char: 'р╕н', name: 'р╕нр╕н-р╕нр╣Ир╕▓р╕З', meaning: 'basin', roman: 'or' },
    { char: 'р╕о', name: 'р╕ор╕н-р╕Щр╕Бр╕ор╕╣р╕Б', meaning: 'owl', roman: 'hor' }
  ];

  return fallbackData.map(item => ({
    ...item,
    image: `/src/assets/letters/${item.char.toLowerCase()}_${item.roman}.png`,
    level: 'Beginner',
    lessonKey: 'consonants_basic'
  }));
};

/**
 * Fallback greetings data
 */
const getGreetingsFallback = () => {
  const fallbackData = [
    { thai: "р╕кр╕зр╕▒р╕кр╕Фр╕╡", roman: "sa-wat-dee", meaning: "hello", example: "р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Др╕гр╕▒р╕Ъ / р╕кр╕зр╕▒р╕кр╕Фр╕╡р╕Др╣Ир╕░", tts: "р╕кр╕зр╕▒р╕кр╕Фр╕╡", emoji: "ЁЯСЛ" },
    { thai: "р╕Вр╕нр╕Ър╕Др╕╕р╕У", roman: "khob-khun", meaning: "thank you", example: "р╕Вр╕нр╕Ър╕Др╕╕р╕Ур╕бр╕▓р╕Бр╕Др╕гр╕▒р╕Ъ / р╕Вр╕нр╕Ър╕Др╕╕р╕Ур╕Др╣Ир╕░", tts: "р╕Вр╕нр╕Ър╕Др╕╕р╕У", emoji: "ЁЯЩП" },
    { thai: "р╕Вр╕нр╣Вр╕Чр╕й", roman: "kho-thot", meaning: "sorry / excuse me", example: "р╕Вр╕нр╣Вр╕Чр╕йр╕Др╕гр╕▒р╕Ъ / р╕Вр╕нр╣Вр╕Чр╕йр╕Др╣Ир╕░", tts: "р╕Вр╕нр╣Вр╕Чр╕й", emoji: "ЁЯШФ" },
    { thai: "р╕ер╕▓р╕Бр╣Ир╕нр╕Щ", roman: "la-korn", meaning: "goodbye", example: "р╕ер╕▓р╕Бр╣Ир╕нр╕Щ р╣Бр╕ер╣Йр╕зр╕Юр╕Ър╕Бр╕▒р╕Щр╣Гр╕лр╕бр╣И", tts: "р╕ер╕▓р╕Бр╣Ир╕нр╕Щ", emoji: "ЁЯСЛ" },
    { thai: "р╕Эр╕▒р╕Щр╕Фр╕╡", roman: "fan-dee", meaning: "good night", example: "р╕Эр╕▒р╕Щр╕Фр╕╡р╕Щр╕░р╕Др╕гр╕▒р╕Ъ / р╕Эр╕▒р╕Щр╕Фр╕╡р╕Др╣Ир╕░", tts: "р╕Эр╕▒р╕Щр╕Фр╕╡", emoji: "ЁЯМЩ" },
    { thai: "р╕кр╕Ър╕▓р╕вр╕Фр╕╡р╣Др╕лр╕б", roman: "sa-bai-dee-mai", meaning: "how are you?", example: "р╕кр╕Ър╕▓р╕вр╕Фр╕╡р╣Др╕лр╕бр╕Др╕гр╕▒р╕Ъ / р╕кр╕Ър╕▓р╕вр╕Фр╕╡р╣Др╕лр╕бр╕Др╕░", tts: "р╕кр╕Ър╕▓р╕вр╕Фр╕╡р╣Др╕лр╕б", emoji: "ЁЯЩВ" },
    { thai: "р╕вр╕┤р╕Щр╕Фр╕╡р╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╕гр╕╣р╣Йр╕Ир╕▒р╕Б", roman: "yin-dee-tee-dai-roo-jak", meaning: "nice to meet you", example: "р╕вр╕┤р╕Щр╕Фр╕╡р╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╕гр╕╣р╣Йр╕Ир╕▒р╕Бр╕Др╕гр╕▒р╕Ъ / р╕Др╣Ир╕░", tts: "р╕вр╕┤р╕Щр╕Фр╕╡р╕Чр╕╡р╣Ир╣Др╕Фр╣Йр╕гр╕╣р╣Йр╕Ир╕▒р╕Б", emoji: "ЁЯдЭ" },
    { thai: "р╕Вр╕нр╣Гр╕лр╣Йр╣Вр╕Кр╕Др╕Фр╕╡", roman: "kho-hai-chok-dee", meaning: "good luck", example: "р╕Вр╕нр╣Гр╕лр╣Йр╣Вр╕Кр╕Др╕Фр╕╡р╕Щр╕░", tts: "р╕Вр╕нр╣Гр╕лр╣Йр╣Вр╕Кр╕Др╕Фр╕╡", emoji: "ЁЯНА" },
    { thai: "р╕Вр╕нр╣Гр╕лр╣Йр╕бр╕╡р╕Др╕зр╕▓р╕бр╕кр╕╕р╕В", roman: "kho-hai-mee-khwam-suk", meaning: "be happy / have a nice day", example: "р╕Вр╕нр╣Гр╕лр╣Йр╕бр╕╡р╕Др╕зр╕▓р╕бр╕кр╕╕р╕Вр╕Чр╕╕р╕Бр╕зр╕▒р╕Щ", tts: "р╕Вр╕нр╣Гр╕лр╣Йр╕бр╕╡р╕Др╕зр╕▓р╕бр╕кр╕╕р╕В", emoji: "ЁЯШК" },
    { thai: "р╕вр╕┤р╕Щр╕Фр╕╡р╕Хр╣Йр╕нр╕Щр╕гр╕▒р╕Ъ", roman: "yin-dee-ton-rub", meaning: "welcome", example: "р╕вр╕┤р╕Щр╕Фр╕╡р╕Хр╣Йр╕нр╕Щр╕гр╕▒р╕Ър╕кр╕╣р╣Ир╕Ыр╕гр╕░р╣Ар╕Чр╕ир╣Др╕Чр╕в", tts: "р╕вр╕┤р╕Щр╕Фр╕╡р╕Хр╣Йр╕нр╕Щр╕гр╕▒р╕Ъ", emoji: "ЁЯПа" }
  ];

  return fallbackData.map(item => ({
    ...item,
    category: 'greetings',
    lesson: 3,
    level: 'Beginner',
    type: 'greeting',
    image: `/src/assets/greetings/${item.thai}.png`
  }));
};

/**
 * Get image path for consonant
 */
export const getConsonantImagePath = (consonant) => {
  if (consonant.image) {
    return consonant.image;
  }
  
  // Generate fallback path
  const char = consonant.char || consonant.thai;
  const roman = consonant.roman || 'unknown';
  return `/src/assets/letters/${char.toLowerCase()}_${roman}.png`;
};

/**
 * Get display name for consonant
 */
export const getConsonantDisplayName = (consonant) => {
  return consonant.name || consonant.exampleTH || `${consonant.char}-${consonant.meaning}`;
};

/**
 * Get greetings with fallback
 */
export const getGreetingsWithFallback = async () => {
  try {
    return await fetchGreetings();
  } catch (error) {
    console.warn('тЪая╕П Using fallback greetings data:', error.message);
    return getGreetingsFallback();
  }
};

// Alias for compatibility
export const getConsonants = fetchConsonants;
export const getVowels = fetchVowels;
export const getGreetings = fetchGreetings;

export default {
  fetchConsonants,
  getConsonants,
  getConsonantsWithFallback,
  getConsonantImagePath,
  getConsonantDisplayName,
  fetchVowels,
  getVowels,
  getVowelsWithFallback,
  fetchGreetings,
  getGreetings,
  getGreetingsWithFallback
};
