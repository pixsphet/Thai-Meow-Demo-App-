const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');

exports.login = async (req, res, next) => {
  try {
    const { email, password } = req.body || {};
    console.log('üîê [LOGIN] body =', req.body);               // <== debug

    if (!email || !password) {
      return res.status(400).json({ success:false, error:'email & password are required' });
    }

    const normEmail = String(email).toLowerCase().trim();
    // find using normalized email (case-insensitive)
    const userDoc = await User.findOne({ email: { $regex: new RegExp(`^${normEmail}$`, 'i') } });
    const user = userDoc ? userDoc.toObject() : null;
    console.log('üîé [LOGIN] find user by', normEmail, '=>', !!user, user?._id);  // <== debug

    if (!user) {
      return res.status(401).json({ success:false, error:'‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö DB ‡πÄ‡∏Å‡πà‡∏≤: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ user.password (‡πÄ‡∏î‡∏¥‡∏°) ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô hash ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ‡πÅ‡∏•‡∏∞ migrate ‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô passwordHash ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ú‡πà‡∏≤‡∏ô
    let ok = false;
    if (user.passwordHash) {
      ok = await bcrypt.compare(password, user.passwordHash);
    } else if (user.password) {
      console.warn('‚ö†Ô∏è [LOGIN] legacy password field detected, attempting migrate for', normEmail);
      ok = await bcrypt.compare(password, user.password);
      if (ok) {
        try {
          const newHash = await bcrypt.hash(password, 10);
          await User.updateOne({ _id: user._id }, { $set: { passwordHash: newHash }, $unset: { password: 1 } });
          console.log('üîß [LOGIN] migrated legacy password -> passwordHash for', normEmail);
        } catch (mErr) {
          console.warn('‚ö†Ô∏è [LOGIN] migrate failed:', mErr?.message);
        }
      }
    } else {
      console.warn('‚ö†Ô∏è [LOGIN] user has no password/passwordHash, email=', normEmail);
    }
    console.log('üßÆ [LOGIN] bcrypt.compare =>', ok);           // <== debug

    if (!ok) {
      return res.status(401).json({ success:false, error:'‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }

    const token = jwt.sign(
      { sub: user._id },
      process.env.JWT_SECRET || 'dev_secret',
      { expiresIn: '7d' }
    );

    return res.json({ success:true, data:{ user: {
      id: user._id, email: user.email, username: user.username,
      level: user.level, xp: user.xp, streak: user.streak, hearts: user.hearts,
      lessonsCompleted: user.lessonsCompleted, badges: user.badges
    }, token }});
  } catch (e) { 
    console.error('‚ùå [LOGIN] error:', e);
    next(e); 
  }
};

exports.register = async (req, res, next) => {
  try {
    const { username, email, password, petName } = req.body;

    // Validate required fields
    if (!username || !email || !password) {
      return res.status(400).json({
        success: false,
        error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
      });
    }

    const normEmail = String(email).toLowerCase().trim();
    
    // Check if email already exists
    const existingEmail = await User.findOne({ email: normEmail });
    if (existingEmail) {
      return res.status(400).json({
        success: false,
        error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
      });
    }

    // Check if username already exists
    const existingUsername = await User.findOne({ username: username.trim() });
    if (existingUsername) {
      return res.status(400).json({
        success: false,
        error: '‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
      });
    }

    // Check if pet name already exists (if provided)
    if (petName) {
      const existingPetName = await User.findOne({ petName: petName.trim() });
      if (existingPetName) {
        return res.status(400).json({
          success: false,
          error: '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
        });
      }
    }

    // Hash password
    const passwordHash = await bcrypt.hash(password, 10);

    // Create user
    const user = new User({
      username: username.trim(),
      email: normEmail,
      passwordHash,
      petName: petName ? petName.trim() : '‡∏ô‡πâ‡∏≠‡∏á‡πÅ‡∏°‡∏ß'
    });

    await user.save();

    // Generate JWT token
    const token = jwt.sign(
      { sub: user._id },
      process.env.JWT_SECRET || 'dev_secret',
      { expiresIn: '7d' }
    );

    res.status(201).json({
      success: true,
      message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      data: {
        user: {
          id: user._id,
          username: user.username,
          email: user.email,
          petName: user.petName,
          hearts: user.hearts,
          xp: user.xp,
          level: user.level,
          streak: user.streak
        },
        token
      }
    });
  } catch (error) {
    console.error('‚ùå [REGISTER] error:', error);
    next(error);
  }
};

// ‚úÖ POST /api/auth/verify-identity - Verify identity with email and pet name
exports.verifyIdentityForReset = async (req, res, next) => {
  try {
    const { email, petName } = req.body;
    console.log('üîê [VERIFY_IDENTITY] body =', { email, petName: petName ? '***' : undefined });

    if (!email || !petName) {
      return res.status(400).json({ 
        success: false, 
        error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å' 
      });
    }

    const normEmail = String(email).toLowerCase().trim();
    
    // Find user by email (case-insensitive)
    const userDoc = await User.findOne({ email: { $regex: new RegExp(`^${normEmail}$`, 'i') } });
    const user = userDoc ? userDoc.toObject() : null;
    console.log('üîé [VERIFY_IDENTITY] find user by', normEmail, '=>', !!user);

    if (!user) {
      return res.status(404).json({ 
        success: false, 
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' 
      });
    }

    // Verify pet name
    if (user.petName !== petName) {
      return res.status(401).json({ 
        success: false, 
        error: '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' 
      });
    }

    console.log('‚úÖ [VERIFY_IDENTITY] identity verified for', normEmail);

    return res.json({ 
      success: true, 
      message: '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' 
    });

  } catch (error) {
    console.error('‚ùå [VERIFY_IDENTITY] error:', error);
    next(error);
  }
};

// ‚úÖ POST /api/auth/reset-password - Reset password with verified identity
exports.resetPassword = async (req, res, next) => {
  try {
    const { email, petName, newPassword } = req.body;
    console.log('üîê [RESET_PASSWORD] body =', { email, petName: petName ? '***' : undefined });

    if (!email || !petName || !newPassword) {
      return res.status(400).json({ 
        success: false, 
        error: '‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á ‡πÅ‡∏•‡∏∞‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å' 
      });
    }

    if (newPassword.length < 6) {
      return res.status(400).json({ 
        success: false, 
        error: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 6 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£' 
      });
    }

    const normEmail = String(email).toLowerCase().trim();
    
    // Find user by email (case-insensitive)
    const userDoc = await User.findOne({ email: { $regex: new RegExp(`^${normEmail}$`, 'i') } });
    const user = userDoc ? userDoc.toObject() : null;
    console.log('üîé [RESET_PASSWORD] find user by', normEmail, '=>', !!user);

    if (!user) {
      return res.status(404).json({ 
        success: false, 
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' 
      });
    }

    // Verify pet name
    if (user.petName !== petName) {
      return res.status(401).json({ 
        success: false, 
        error: '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡∏ï‡∏ß‡πå‡πÄ‡∏•‡∏µ‡πâ‡∏¢‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' 
      });
    }

    // Hash new password
    const bcrypt = require('bcryptjs');
    const passwordHash = await bcrypt.hash(newPassword, 10);

    // Update user password
    await User.updateOne(
      { _id: user._id }, 
      { 
        $set: { passwordHash },
        $unset: { password: 1 } // Remove legacy password field if exists
      }
    );

    console.log('‚úÖ [RESET_PASSWORD] password updated for', normEmail);

    return res.json({ 
      success: true, 
      message: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' 
    });

  } catch (error) {
    console.error('‚ùå [RESET_PASSWORD] error:', error);
    next(error);
  }
};
