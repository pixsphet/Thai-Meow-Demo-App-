const express = require('express');
const router = express.Router();

// Mock lessons data
const mockLessons = [
  {
    _id: '1',
    lesson_id: 1,
    title: '‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ ‡∏Å-‡∏à',
    titleTH: '‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ ‡∏Å-‡∏à',
    level: 'Beginner',
    key: 'consonants-1',
    description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô 5 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å',
    order: 1,
    difficulty: 'easy',
    estimatedTime: 10,
    xpReward: 50,
    isUnlocked: true,
    isCompleted: false,
    progress: 0,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    _id: '2',
    lesson_id: 2,
    title: '‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ ‡∏â-‡∏ç',
    titleTH: '‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ ‡∏â-‡∏ç',
    level: 'Beginner',
    key: 'consonants-2',
    description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô 5 ‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ',
    order: 2,
    difficulty: 'easy',
    estimatedTime: 10,
    xpReward: 50,
    isUnlocked: false,
    isCompleted: false,
    progress: 0,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    _id: '3',
    lesson_id: 3,
    title: '‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ ‡∏é-‡∏ì',
    titleTH: '‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ ‡∏é-‡∏ì',
    level: 'Beginner',
    key: 'consonants-3',
    description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô 5 ‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ',
    order: 3,
    difficulty: 'easy',
    estimatedTime: 10,
    xpReward: 50,
    isUnlocked: false,
    isCompleted: false,
    progress: 0,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    _id: '4',
    lesson_id: 4,
    title: '‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ ‡∏î-‡∏ö',
    titleTH: '‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ ‡∏î-‡∏ö',
    level: 'Beginner',
    key: 'consonants-4',
    description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô 5 ‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ',
    order: 4,
    difficulty: 'easy',
    estimatedTime: 10,
    xpReward: 50,
    isUnlocked: false,
    isCompleted: false,
    progress: 0,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    _id: '5',
    lesson_id: 5,
    title: '‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ ‡∏õ-‡∏¢',
    titleTH: '‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ ‡∏õ-‡∏¢',
    level: 'Beginner',
    key: 'consonants-5',
    description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô 5 ‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ',
    order: 5,
    difficulty: 'easy',
    estimatedTime: 10,
    xpReward: 50,
    isUnlocked: false,
    isCompleted: false,
    progress: 0,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    _id: '6',
    lesson_id: 6,
    title: '‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ ‡∏£-‡∏≠',
    titleTH: '‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ ‡∏£-‡∏≠',
    level: 'Beginner',
    key: 'consonants-6',
    description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô 5 ‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ',
    order: 6,
    difficulty: 'easy',
    estimatedTime: 10,
    xpReward: 50,
    isUnlocked: false,
    isCompleted: false,
    progress: 0,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    _id: '7',
    lesson_id: 7,
    title: '‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ ‡∏Æ',
    titleTH: '‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞ ‡∏Æ',
    level: 'Beginner',
    key: 'consonants-7',
    description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡∏ï‡∏±‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢',
    order: 7,
    difficulty: 'easy',
    estimatedTime: 10,
    xpReward: 50,
    isUnlocked: false,
    isCompleted: false,
    progress: 0,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    _id: '8',
    lesson_id: 8,
    title: '‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
    titleTH: '‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
    level: 'Beginner',
    key: 'consonants-review',
    description: '‡∏ó‡∏ö‡∏ó‡∏ß‡∏ô‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏°‡∏≤',
    order: 8,
    difficulty: 'medium',
    estimatedTime: 15,
    xpReward: 100,
    isUnlocked: false,
    isCompleted: false,
    progress: 0,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    _id: '9',
    lesson_id: 9,
    title: '‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞',
    titleTH: '‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞',
    level: 'Beginner',
    key: 'pronunciation',
    description: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÄ‡∏™‡∏µ‡∏¢‡∏á‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
    order: 9,
    difficulty: 'medium',
    estimatedTime: 15,
    xpReward: 100,
    isUnlocked: false,
    isCompleted: false,
    progress: 0,
    createdAt: new Date(),
    updatedAt: new Date()
  },
  {
    _id: '10',
    lesson_id: 10,
    title: '‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞',
    titleTH: '‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞',
    level: 'Beginner',
    key: 'consonants-test',
    description: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏π‡πâ‡∏û‡∏¢‡∏±‡∏ç‡∏ä‡∏ô‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
    order: 10,
    difficulty: 'hard',
    estimatedTime: 20,
    xpReward: 200,
    isUnlocked: false,
    isCompleted: false,
    progress: 0,
    createdAt: new Date(),
    updatedAt: new Date()
  }
];

// GET /api/lessons/level/:level - ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö
router.get('/level/:level', (req, res) => {
  try {
    const { level } = req.params;
    console.log(`üìö Fetching lessons for level: ${level}`);
    
    const lessons = mockLessons.filter(lesson => lesson.level === level);
    
    res.json({
      success: true,
      data: lessons,
      lessons: lessons, // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
      count: lessons.length,
      level: level
    });
  } catch (error) {
    console.error('Error fetching lessons by level:', error);
    res.status(500).json({
      success: false,
      error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ',
      data: [],
      lessons: []
    });
  }
});

// GET /api/lessons - ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get('/', (req, res) => {
  try {
    console.log('üìö Fetching all lessons');
    
    res.json({
      success: true,
      data: mockLessons,
      lessons: mockLessons, // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backward compatibility
      count: mockLessons.length
    });
  } catch (error) {
    console.error('Error fetching all lessons:', error);
    res.status(500).json({
      success: false,
      error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ',
      data: [],
      lessons: []
    });
  }
});

// GET /api/lessons/:id - ‡∏î‡∏∂‡∏á‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ï‡∏≤‡∏° ID
router.get('/:id', (req, res) => {
  try {
    const { id } = req.params;
    console.log(`üìö Fetching lesson by ID: ${id}`);
    
    const lesson = mockLessons.find(l => l._id === id || l.lesson_id === parseInt(id));
    
    if (!lesson) {
      return res.status(404).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
        data: null
      });
    }
    
    res.json({
      success: true,
      data: lesson
    });
  } catch (error) {
    console.error('Error fetching lesson by ID:', error);
    res.status(500).json({
      success: false,
      error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÑ‡∏î‡πâ',
      data: null
    });
  }
});

// PUT /api/lessons/:id/progress - ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
router.put('/:id/progress', (req, res) => {
  try {
    const { id } = req.params;
    const { progress } = req.body;
    
    console.log(`üìö Updating lesson progress for ID: ${id}, progress: ${progress}`);
    
    const lessonIndex = mockLessons.findIndex(l => l._id === id || l.lesson_id === parseInt(id));
    
    if (lessonIndex === -1) {
      return res.status(404).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£'
      });
    }
    
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    mockLessons[lessonIndex].progress = progress;
    mockLessons[lessonIndex].updatedAt = new Date();
    
    // ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 100% ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    if (progress >= 100) {
      mockLessons[lessonIndex].isCompleted = true;
      // ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
      if (lessonIndex + 1 < mockLessons.length) {
        mockLessons[lessonIndex + 1].isUnlocked = true;
      }
    }
    
    res.json({
      success: true,
      data: mockLessons[lessonIndex],
      message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });
  } catch (error) {
    console.error('Error updating lesson progress:', error);
    res.status(500).json({
      success: false,
      error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÑ‡∏î‡πâ'
    });
  }
});

module.exports = router;
