const path = require('path');
const mongoose = require('mongoose');
const dotenv = require('dotenv');

const Vocab = require('../models/Vocab');

dotenv.config({ path: path.join(__dirname, '..', 'config.env') });

const vowels = [
  { thai: '‡∏≠‡∏∞', nameTH: '‡∏™‡∏£‡∏∞‡∏≠‡∏∞', en: 'short a', roman: 'a', imagePath: 'vowels/‡∏≠‡∏∞.jpg' },
  { thai: '‡∏≠‡∏≤', nameTH: '‡∏™‡∏£‡∏∞‡∏≠‡∏≤', en: 'long aa', roman: 'aa', imagePath: 'vowels/‡∏≠‡∏≤.jpg' },
  { thai: '‡∏≠‡∏¥', nameTH: '‡∏™‡∏£‡∏∞‡∏≠‡∏¥', en: 'short i', roman: 'i', imagePath: 'vowels/‡∏≠‡∏¥.jpg' },
  { thai: '‡∏≠‡∏µ', nameTH: '‡∏™‡∏£‡∏∞‡∏≠‡∏µ', en: 'long ii', roman: 'ii', imagePath: 'vowels/‡∏≠‡∏µ.jpg' },
  { thai: '‡∏≠‡∏∂', nameTH: '‡∏™‡∏£‡∏∞‡∏≠‡∏∂', en: 'short ue', roman: 'ue', imagePath: 'vowels/‡∏≠‡∏∂.jpg' },
  { thai: '‡∏≠‡∏∑‡∏≠', nameTH: '‡∏™‡∏£‡∏∞‡∏≠‡∏∑‡∏≠', en: 'long uee', roman: 'uee', imagePath: 'vowels/‡∏≠‡∏∑‡∏≠.jpg' },
  { thai: '‡∏≠‡∏∏', nameTH: '‡∏™‡∏£‡∏∞‡∏≠‡∏∏', en: 'short u', roman: 'u', imagePath: 'vowels/‡∏≠‡∏∏.jpg' },
  { thai: '‡∏≠‡∏π', nameTH: '‡∏™‡∏£‡∏∞‡∏≠‡∏π', en: 'long uu', roman: 'uu', imagePath: 'vowels/‡∏≠‡∏π.jpg' },
  { thai: '‡πÄ‡∏≠‡∏∞', nameTH: '‡∏™‡∏£‡∏∞‡πÄ‡∏≠‡∏∞', en: 'short e', roman: 'e (short)', imagePath: 'vowels/‡πÄ‡∏≠‡∏∞.jpg' },
  { thai: '‡πÄ‡∏≠', nameTH: '‡∏™‡∏£‡∏∞‡πÄ‡∏≠', en: 'long e', roman: 'e', imagePath: 'vowels/‡πÄ‡∏≠.jpg' },
  { thai: '‡πÅ‡∏≠‡∏∞', nameTH: '‡∏™‡∏£‡∏∞‡πÅ‡∏≠‡∏∞', en: 'short ae', roman: 'ae (short)', imagePath: 'vowels/‡πÅ‡∏≠‡∏∞.jpg' },
  { thai: '‡πÅ‡∏≠', nameTH: '‡∏™‡∏£‡∏∞‡πÅ‡∏≠', en: 'long ae', roman: 'ae', imagePath: 'vowels/‡πÅ‡∏≠.jpg' },
  { thai: '‡πÇ‡∏≠‡∏∞', nameTH: '‡∏™‡∏£‡∏∞‡πÇ‡∏≠‡∏∞', en: 'short o', roman: 'o (short)', imagePath: 'vowels/‡πÇ‡∏≠‡∏∞.jpg' },
  { thai: '‡πÇ‡∏≠', nameTH: '‡∏™‡∏£‡∏∞‡πÇ‡∏≠', en: 'long o', roman: 'o', imagePath: 'vowels/‡πÇ‡∏≠.jpg' },
  { thai: '‡πÄ‡∏≠‡∏≤‡∏∞', nameTH: '‡∏™‡∏£‡∏∞‡πÄ‡∏≠‡∏≤‡∏∞', en: 'short aw', roman: 'aw (short)', imagePath: 'vowels/‡πÄ‡∏≠‡∏≤‡∏∞.jpg' },
  { thai: '‡∏≠‡∏≠', nameTH: '‡∏™‡∏£‡∏∞‡∏≠‡∏≠', en: 'long aw', roman: 'aw', imagePath: 'vowels/‡∏≠‡∏≠.jpg' },
  { thai: '‡πÄ‡∏≠‡∏≠‡∏∞', nameTH: '‡∏™‡∏£‡∏∞‡πÄ‡∏≠‡∏≠‡∏∞', en: 'short oe', roman: 'oe (short)', imagePath: 'vowels/‡πÄ‡∏≠‡∏≠‡∏∞.jpg' },
  { thai: '‡πÄ‡∏≠‡∏≠', nameTH: '‡∏™‡∏£‡∏∞‡πÄ‡∏≠‡∏≠', en: 'long oe', roman: 'oe', imagePath: 'vowels/‡πÄ‡∏≠‡∏≠.jpg' },
  { thai: '‡πÄ‡∏≠‡∏µ‡∏¢‡∏∞', nameTH: '‡∏™‡∏£‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏∞', en: 'short ia', roman: 'ia (short)', imagePath: 'vowels/‡πÄ‡∏≠‡∏µ‡∏¢‡∏∞.jpg' },
  { thai: '‡πÄ‡∏≠‡∏µ‡∏¢', nameTH: '‡∏™‡∏£‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢', en: 'long ia', roman: 'ia', imagePath: 'vowels/‡πÄ‡∏≠‡∏µ‡∏¢.jpg' },
  { thai: '‡πÄ‡∏≠‡∏∑‡∏≠‡∏∞', nameTH: '‡∏™‡∏£‡∏∞‡πÄ‡∏≠‡∏∑‡∏≠‡∏∞', en: 'short uea', roman: 'uea (short)', imagePath: 'vowels/‡πÄ‡∏≠‡∏∑‡∏≠‡∏∞.jpg' },
  { thai: '‡πÄ‡∏≠‡∏∑‡∏≠', nameTH: '‡∏™‡∏£‡∏∞‡πÄ‡∏≠‡∏∑‡∏≠', en: 'long uea', roman: 'uea', imagePath: 'vowels/‡πÄ‡∏≠‡∏∑‡∏≠.jpg' },
  { thai: '‡∏≠‡∏±‡∏ß‡∏∞', nameTH: '‡∏™‡∏£‡∏∞‡∏≠‡∏±‡∏ß‡∏∞', en: 'short ua', roman: 'ua (short)', imagePath: 'vowels/‡∏≠‡∏±‡∏ß‡∏∞.jpg' },
  { thai: '‡∏≠‡∏±‡∏ß', nameTH: '‡∏™‡∏£‡∏∞‡∏≠‡∏±‡∏ß', en: 'long ua', roman: 'ua', imagePath: 'vowels/‡∏≠‡∏±‡∏ß.jpg' },
  { thai: '‡∏≠‡∏≥', nameTH: '‡∏™‡∏£‡∏∞‡∏≠‡∏≥', en: 'am', roman: 'am', imagePath: 'vowels/‡∏≠‡∏≥.jpg' },
  { thai: '‡πÉ‡∏≠', nameTH: '‡∏™‡∏£‡∏∞‡πÉ‡∏≠', en: 'ai (mai muan)', roman: 'ai', imagePath: 'vowels/‡πÉ‡∏≠.jpg' },
  { thai: '‡πÑ‡∏≠', nameTH: '‡∏™‡∏£‡∏∞‡πÑ‡∏≠', en: 'ai (mai malai)', roman: 'ai', imagePath: 'vowels/‡πÑ‡∏≠.jpg' },
  { thai: '‡∏§', nameTH: '‡∏™‡∏£‡∏∞‡∏§', en: 'ri', roman: 'ri', imagePath: 'vowels/‡∏§.jpg' },
  { thai: '‡∏§‡πÖ', nameTH: '‡∏™‡∏£‡∏∞‡∏§‡πÖ', en: 'rue', roman: 'rue', imagePath: 'vowels/‡∏§‡πÖ.jpg' },
  { thai: '‡∏¶', nameTH: '‡∏™‡∏£‡∏∞‡∏¶', en: 'lue (short)', roman: 'lue', imagePath: 'vowels/‡∏¶.jpg' },
  { thai: '‡∏¶‡πÖ', nameTH: '‡∏™‡∏£‡∏∞‡∏¶‡πÖ', en: 'lue (long)', roman: 'luee', imagePath: 'vowels/‡∏¶‡πÖ.jpg' },
];

const upsertVowel = async (vowel) => {
  await Vocab.findOneAndUpdate(
    { thai: vowel.thai },
    {
      thai: vowel.thai,
      nameTH: vowel.nameTH,
      en: vowel.en,
      roman: vowel.roman,
      category: 'thai-vowels',
      level: 'Beginner',
      imagePath: vowel.imagePath,
      difficulty: 1,
      isActive: true,
    },
    { upsert: true, new: true, setDefaultsOnInsert: true }
  );
};

const seed = async () => {
  try {
    const mongoUri = process.env.MONGODB_URI;
    if (!mongoUri) {
      throw new Error('MONGODB_URI not set in config.env');
    }

    await mongoose.connect(mongoUri, {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });

    console.log('üå± Connected to MongoDB ‚Äì seeding Thai vowels');

    for (const vowel of vowels) {
      await upsertVowel(vowel);
      console.log(`‚úÖ Upserted ${vowel.thai}`);
    }

    console.log(`üéâ Seeded ${vowels.length} Thai vowels successfully`);
    await mongoose.disconnect();
    process.exit(0);
  } catch (error) {
    console.error('‚ùå Failed to seed Thai vowels:', error);
    await mongoose.disconnect();
    process.exit(1);
  }
};

seed();
