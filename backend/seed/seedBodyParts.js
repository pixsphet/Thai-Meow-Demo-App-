const path = require('path');
const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config({ path: path.join(__dirname, '..', 'config.env') });

// Define Body Parts Schema
const bodyPartSchema = new mongoose.Schema({
  thai: { type: String, required: true },
  roman: { type: String },
  en: { type: String },
  meaningTH: { type: String },
  category: { type: String, default: 'thai-body' },
  level: { type: String, default: 'Beginner' },
  imagePath: { type: String },
  audioText: { type: String },
  exampleTH: { type: String },
  exampleEN: { type: String },
  difficulty: { type: Number, default: 1 },
  isActive: { type: Boolean, default: true },
  tags: [String],
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now },
});

const BodyPart = mongoose.model('BodyPart', bodyPartSchema, 'thai-body');

// Seed data
const bodyPartsData = [
  {
    thai: '‡∏ï‡∏≤',
    roman: 'dtaa',
    en: 'eye',
    meaningTH: '‡∏ï‡∏≤',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡∏ï‡∏≤.jpg',
    audioText: '‡∏ï‡∏≤',
    exampleTH: '‡∏â‡∏±‡∏ô‡∏°‡∏µ‡∏ï‡∏≤‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á',
    exampleEN: 'I have two eyes',
    difficulty: 1,
    isActive: true,
    tags: ['body', 'face'],
  },
  {
    thai: '‡∏´‡∏π',
    roman: 'h«îu',
    en: 'ear',
    meaningTH: '‡∏´‡∏π',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡∏´‡∏π.jpg',
    audioText: '‡∏´‡∏π',
    exampleTH: '‡∏â‡∏±‡∏ô‡∏ü‡∏±‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏´‡∏π',
    exampleEN: 'I listen with my ear',
    difficulty: 1,
    isActive: true,
    tags: ['body', 'face'],
  },
  {
    thai: '‡∏à‡∏°‡∏π‡∏Å',
    roman: 'ja-m√πuk',
    en: 'nose',
    meaningTH: '‡∏à‡∏°‡∏π‡∏Å',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡∏à‡∏°‡∏π‡∏Å.jpg',
    audioText: '‡∏à‡∏°‡∏π‡∏Å',
    exampleTH: '‡∏â‡∏±‡∏ô‡∏™‡∏π‡∏î‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ú‡πà‡∏≤‡∏ô‡∏à‡∏°‡∏π‡∏Å',
    exampleEN: 'I breathe through my nose',
    difficulty: 1,
    isActive: true,
    tags: ['body', 'face'],
  },
  {
    thai: '‡∏õ‡∏≤‡∏Å',
    roman: 'bp√†ak',
    en: 'mouth',
    meaningTH: '‡∏õ‡∏≤‡∏Å',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡∏õ‡∏≤‡∏Å.jpg',
    audioText: '‡∏õ‡∏≤‡∏Å',
    exampleTH: '‡πÄ‡∏ò‡∏≠‡∏õ‡∏¥‡∏î‡∏õ‡∏≤‡∏Å‡∏ï‡∏≠‡∏ô‡∏´‡∏ô‡∏≤‡∏ß',
    exampleEN: 'You close your mouth when cold',
    difficulty: 1,
    isActive: true,
    tags: ['body', 'face'],
  },
  {
    thai: '‡∏ü‡∏±‡∏ô',
    roman: 'fan',
    en: 'tooth',
    meaningTH: '‡∏ü‡∏±‡∏ô',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡∏ü‡∏±‡∏ô.jpg',
    audioText: '‡∏ü‡∏±‡∏ô',
    exampleTH: '‡πÄ‡∏Ç‡∏≤‡πÅ‡∏õ‡∏£‡∏á‡∏ü‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô',
    exampleEN: 'He brushes his teeth every day',
    difficulty: 1,
    isActive: true,
    tags: ['body', 'face'],
  },
  {
    thai: '‡∏•‡∏¥‡πâ‡∏ô',
    roman: 'l√≠n',
    en: 'tongue',
    meaningTH: '‡∏•‡∏¥‡πâ‡∏ô',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡∏•‡∏¥‡πâ‡∏ô.jpg',
    audioText: '‡∏•‡∏¥‡πâ‡∏ô',
    exampleTH: '‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏≤‡∏£‡∏π‡πâ‡∏£‡∏™',
    exampleEN: 'The tongue helps us taste',
    difficulty: 1,
    isActive: true,
    tags: ['body', 'face'],
  },
  {
    thai: '‡∏´‡∏±‡∏ß',
    roman: 'h«îa',
    en: 'head',
    meaningTH: '‡∏´‡∏±‡∏ß',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡∏´‡∏±‡∏ß.jpg',
    audioText: '‡∏´‡∏±‡∏ß',
    exampleTH: '‡πÄ‡∏Ç‡∏≤‡∏õ‡∏ß‡∏î‡∏´‡∏±‡∏ß',
    exampleEN: 'He has a headache',
    difficulty: 1,
    isActive: true,
    tags: ['body'],
  },
  {
    thai: '‡∏ú‡∏°',
    roman: 'ph«ím',
    en: 'hair',
    meaningTH: '‡∏ú‡∏°',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡∏ú‡∏°.jpg',
    audioText: '‡∏ú‡∏°',
    exampleTH: '‡πÄ‡∏ò‡∏≠‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ú‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£',
    exampleEN: 'How do you style your hair',
    difficulty: 1,
    isActive: true,
    tags: ['body', 'face'],
  },
  {
    thai: '‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤',
    roman: 'bai-n√¢a',
    en: 'face',
    meaningTH: '‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤.jpg',
    audioText: '‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤',
    exampleTH: '‡πÄ‡∏ò‡∏≠‡∏°‡∏µ‡πÉ‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏™‡∏ß‡∏¢',
    exampleEN: 'You have a beautiful face',
    difficulty: 1,
    isActive: true,
    tags: ['body', 'face'],
  },
  {
    thai: '‡∏°‡∏∑‡∏≠',
    roman: 'm â â',
    en: 'hand',
    meaningTH: '‡∏°‡∏∑‡∏≠',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡∏°‡∏∑‡∏≠.jpg',
    audioText: '‡∏°‡∏∑‡∏≠',
    exampleTH: '‡∏â‡∏±‡∏ô‡∏°‡∏µ‡∏°‡∏∑‡∏≠‡∏™‡∏≠‡∏á‡∏Ç‡πâ‡∏≤‡∏á',
    exampleEN: 'I have two hands',
    difficulty: 1,
    isActive: true,
    tags: ['body'],
  },
  {
    thai: '‡πÅ‡∏Ç‡∏ô',
    roman: 'kh…õÃå…õn',
    en: 'arm',
    meaningTH: '‡πÅ‡∏Ç‡∏ô',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡πÅ‡∏Ç‡∏ô.jpg',
    audioText: '‡πÅ‡∏Ç‡∏ô',
    exampleTH: '‡πÅ‡∏Ç‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡πÄ‡∏´‡∏ô‡∏∑‡πà‡∏≠‡∏¢',
    exampleEN: 'My arm is tired',
    difficulty: 1,
    isActive: true,
    tags: ['body'],
  },
  {
    thai: '‡πÄ‡∏ó‡πâ‡∏≤',
    roman: 'th√°o',
    en: 'foot',
    meaningTH: '‡πÄ‡∏ó‡πâ‡∏≤',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡πÄ‡∏ó‡πâ‡∏≤.jpg',
    audioText: '‡πÄ‡∏ó‡πâ‡∏≤',
    exampleTH: '‡πÄ‡∏ó‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏õ‡∏ß‡∏î',
    exampleEN: 'My foot hurts',
    difficulty: 1,
    isActive: true,
    tags: ['body'],
  },
  {
    thai: '‡∏Ç‡∏≤',
    roman: 'kh«éa',
    en: 'leg',
    meaningTH: '‡∏Ç‡∏≤',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡∏Ç‡∏≤.jpg',
    audioText: '‡∏Ç‡∏≤',
    exampleTH: '‡πÄ‡∏Ç‡∏≤‡∏ß‡∏¥‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡∏≤',
    exampleEN: 'He runs with his legs',
    difficulty: 1,
    isActive: true,
    tags: ['body'],
  },
  {
    thai: '‡πÑ‡∏´‡∏•‡πà',
    roman: 'l√†i',
    en: 'shoulder',
    meaningTH: '‡πÑ‡∏´‡∏•‡πà',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡πÑ‡∏´‡∏•‡πà.jpg',
    audioText: '‡πÑ‡∏´‡∏•‡πà',
    exampleTH: '‡πÄ‡∏Ç‡∏≤‡∏à‡∏∏‡∏î‡πÑ‡∏´‡∏•‡πà',
    exampleEN: 'He shrugged his shoulder',
    difficulty: 1,
    isActive: true,
    tags: ['body'],
  },
  {
    thai: '‡∏´‡∏•‡∏±‡∏á',
    roman: 'l«éng',
    en: 'back',
    meaningTH: '‡∏´‡∏•‡∏±‡∏á',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡∏´‡∏•‡∏±‡∏á.jpg',
    audioText: '‡∏´‡∏•‡∏±‡∏á',
    exampleTH: '‡∏´‡∏•‡∏±‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏õ‡∏ß‡∏î',
    exampleEN: 'My back hurts',
    difficulty: 1,
    isActive: true,
    tags: ['body'],
  },
  {
    thai: '‡∏ó‡πâ‡∏≠‡∏á',
    roman: 'th√≥ng',
    en: 'stomach',
    meaningTH: '‡∏ó‡πâ‡∏≠‡∏á',
    category: 'thai-body',
    level: 'Beginner',
    imagePath: 'body/‡∏ó‡πâ‡∏≠‡∏á.jpg',
    audioText: '‡∏ó‡πâ‡∏≠‡∏á',
    exampleTH: '‡∏ó‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô‡∏´‡∏¥‡∏ß',
    exampleEN: 'My stomach is hungry',
    difficulty: 1,
    isActive: true,
    tags: ['body'],
  },
];

// Main function
const seedBodyParts = async (options = {}) => {
  const { mongoUri = process.env.MONGODB_URI, skipConnect = false } = options;

  if (!mongoUri) {
    throw new Error('MONGODB_URI is not defined');
  }
  try {
    if (!skipConnect) {
      await mongoose.connect(mongoUri, {
        useNewUrlParser: true,
        useUnifiedTopology: true,
      });
      console.log('‚úÖ Connected to MongoDB');
    }

    // Clear existing data
    await BodyPart.deleteMany({});
    console.log('üóëÔ∏è  Cleared existing body parts');

    // Insert new data
    const result = await BodyPart.insertMany(bodyPartsData);
    console.log(`‚úÖ Successfully seeded ${result.length} body parts`);
  } catch (error) {
    console.error('‚ùå Seeding Error:', error);
    throw error;
  } finally {
    if (!skipConnect) {
      await mongoose.disconnect();
    }
  }
};

if (require.main === module) {
  seedBodyParts()
    .then(() => process.exit(0))
    .catch(async (error) => {
      console.error('‚ùå Seeding Error:', error);
      try {
        await mongoose.disconnect();
      } catch (err) {
        console.error('‚ö†Ô∏è Failed to disconnect mongoose cleanly:', err);
      }
      process.exit(1);
    });
}

module.exports = seedBodyParts;
